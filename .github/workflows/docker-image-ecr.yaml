name: Build and Push Python App Docker Image to ECR

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # - name: Run Tests (Optional)
      #   run: pytest  # Uncomment if you have tests

      - name: Get Git and Timestamp Info
        id: vars
        run: |
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]' | tr '/' '-')
          SHORT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%s)
          BUILD_ID="${BRANCH_NAME}-${SHORT_SHA}-${TIMESTAMP}"
          BRANCH_LATEST_TAG="${BRANCH_NAME}-latest"
          echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_ENV
          echo "BRANCH_LATEST_TAG=${BRANCH_LATEST_TAG}" >> $GITHUB_ENV
          echo "Generated Tag: ${BUILD_ID}"
          echo "Branch Latest Tag: ${BRANCH_LATEST_TAG}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get AWS ECR Login Token
        run: |
          ECR_REGISTRY="148761651852.dkr.ecr.ap-south-1.amazonaws.com"
          echo "ECR_REGISTRY=${ECR_REGISTRY}" >> $GITHUB_ENV
          echo "Using ECR Registry: ${ECR_REGISTRY}"
          
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${ECR_REGISTRY}

      - name: Set up QEMU for Multi-Arch Build
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Images for Each Architecture
        run: |
          for ARCH in 'amd64' 'arm64'; do
            echo "Building for $ARCH..."
            docker buildx build --load --platform linux/${ARCH} . \
              -t ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:${ARCH}-${BUILD_ID} \
              --build-arg ARCH=${ARCH}
          done

          for ARCH in 'amd64' 'arm64'; do
            echo "Pushing image for $ARCH..."
            docker push ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:${ARCH}-${BUILD_ID}
          done

      - name: Create and Push Multi-Arch Manifest
        run: |
          echo "Creating manifest for ${BUILD_ID}..."
          docker manifest create ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:${BUILD_ID} \
            ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:amd64-${BUILD_ID} \
            ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:arm64-${BUILD_ID}

          docker manifest push ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:${BUILD_ID}

      - name: Create and Push Branch Latest Multi-Arch Tag
        run: |
          echo "Creating latest manifest for branch: ${BRANCH_LATEST_TAG}..."
          docker manifest create ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:${BRANCH_LATEST_TAG} \
            ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:amd64-${BUILD_ID} \
            ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:arm64-${BUILD_ID}

          docker manifest push ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:${BRANCH_LATEST_TAG}
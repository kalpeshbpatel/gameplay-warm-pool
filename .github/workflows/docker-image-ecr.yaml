name: Build and Push Python App Docker Image to ECR

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # - name: Run Tests (Optional)
      #   run: pytest  # Uncomment if you have tests

      - name: Get Git and Timestamp Info
        id: vars
        run: |
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]' | tr '/' '-')
          SHORT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%s)
          TAG="${BRANCH_NAME}-${SHORT_SHA}-${TIMESTAMP}"
          echo "IMAGE_TAG=${TAG}" >> $GITHUB_ENV
          echo "Generated Tag: ${TAG}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get AWS ECR Login Token
        id: ecr-login
        run: |
          ECR_REGISTRY=$(aws ecr get-authorization-token --query 'authorizationData[0].proxyEndpoint' --output text)
          echo "ECR_REGISTRY=${ECR_REGISTRY}" >> $GITHUB_ENV

      - name: Log in to Amazon ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ECR_REGISTRY }}

      - name: Set up QEMU for Multi-Arch Build
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image to ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}:latest
            ${{ env.ECR_REGISTRY }}:${{ env.IMAGE_TAG }}
          platforms: |
            linux/amd64
          cache-from: type=registry,ref=${{ env.ECR_REGISTRY }}:latest
          cache-to: type=inline

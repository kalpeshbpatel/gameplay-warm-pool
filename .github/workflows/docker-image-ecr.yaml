name: Build and Push Docker Image to AWS ECR

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  set-build-vars:
    runs-on: ubuntu-latest
    outputs:
      build_id: ${{ steps.vars.outputs.build_id }}
      branch_latest_tag: ${{ steps.vars.outputs.branch_latest_tag }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Get Git and Timestamp Info
        id: vars
        run: |
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]' | tr '/' '-')
          SHORT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%s)
          BUILD_ID="${BRANCH_NAME}-${SHORT_SHA}-${TIMESTAMP}"
          BRANCH_LATEST_TAG="${BRANCH_NAME}-latest"
          
          echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_OUTPUT
          echo "BRANCH_LATEST_TAG=${BRANCH_LATEST_TAG}" >> $GITHUB_OUTPUT

  build-and-push:
    runs-on: ubuntu-latest
    needs: set-build-vars
    strategy:
      matrix:
        arch: [amd64, arm64]
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image for ${{ matrix.arch }}
        run: |
          ARCH="${{ matrix.arch }}"
          docker buildx build --load --platform linux/${ARCH} . \
            -t ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${ARCH}-${{ needs.set-build-vars.outputs.build_id }} \
            --build-arg ARCH=${ARCH}
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${ARCH}-${{ needs.set-build-vars.outputs.build_id }}

  create-manifest:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Create and Push Multi-Arch Manifest
        run: |
          docker manifest create ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ needs.set-build-vars.outputs.build_id }} \
            ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:amd64-${{ needs.set-build-vars.outputs.build_id }} \
            ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:arm64-${{ needs.set-build-vars.outputs.build_id }}
          docker manifest push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ needs.set-build-vars.outputs.build_id }}

      - name: Create and Push Branch Latest Tag
        run: |
          docker manifest create ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ needs.set-build-vars.outputs.branch_latest_tag }} \
            ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:amd64-${{ needs.set-build-vars.outputs.build_id }} \
            ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:arm64-${{ needs.set-build-vars.outputs.build_id }}
          docker manifest push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ needs.set-build-vars.outputs.branch_latest_tag }}

  send-notification:
    runs-on: ubuntu-latest
    needs: create-manifest
    if: success()
    
    steps:
      - name: Send Notification to Microsoft Teams
        run: |
          REPO_URL="${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}"
          MESSAGE="## ðŸš€ Docker Image Successfully Built and Pushed\n
          - **Repository:** ${REPO_URL}\n
          - **Tags:** **${{ needs.set-build-vars.outputs.build_id }}**, **${{ needs.set-build-vars.outputs.branch_latest_tag }}**\n
          - **Branch:** ${{ github.ref_name }}\n
          - **Commit:** ${{ github.sha }}\n
          - **GitHub Actions Run:** [View Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          
          PAYLOAD="{\"text\": \"${MESSAGE}\" }"
          
          curl -H "Content-Type: application/json" \
               -d "${PAYLOAD}" \
               ${{ secrets.TEAMS_WEBHOOK_URL }}

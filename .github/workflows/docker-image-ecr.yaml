name: Build and Push Multi-Arch Docker Image to ECR

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        arch: [amd64, arm64]  # Parallel build for both architectures

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Git and Timestamp Info
        id: vars
        run: |
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]' | tr '/' '-')
          SHORT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%s)
          BUILD_ID="${BRANCH_NAME}-${SHORT_SHA}-${TIMESTAMP}"
          BRANCH_LATEST_TAG="${BRANCH_NAME}-latest"

          echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_ENV
          echo "BRANCH_LATEST_TAG=${BRANCH_LATEST_TAG}" >> $GITHUB_ENV
          echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_OUTPUT  # <-- Pass to next job
          echo "BRANCH_LATEST_TAG=${BRANCH_LATEST_TAG}" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get AWS ECR Login Token
        run: |
          ECR_REGISTRY="148761651852.dkr.ecr.ap-south-1.amazonaws.com"
          echo "ECR_REGISTRY=${ECR_REGISTRY}" >> $GITHUB_ENV
          
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${ECR_REGISTRY}

      - name: Set up QEMU for Multi-Arch Build
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Build and Push Docker Image for ${{ matrix.arch }}
        run: |
          ARCH="${{ matrix.arch }}"
          docker buildx build --load --platform linux/${ARCH} . \
            -t ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:${ARCH}-${BUILD_ID} \
            --build-arg ARCH=${ARCH} \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new


    outputs:
      build_id: ${{ steps.vars.outputs.BUILD_ID }}
      branch_latest_tag: ${{ steps.vars.outputs.BRANCH_LATEST_TAG }}

  create-manifest:
    runs-on: ubuntu-latest
    needs: build-and-push  # Wait for image builds
    env:
      BUILD_ID: ${{ needs.build-and-push.outputs.build_id }}
      BRANCH_LATEST_TAG: ${{ needs.build-and-push.outputs.branch_latest_tag }}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get AWS ECR Login Token
        run: |
          ECR_REGISTRY="148761651852.dkr.ecr.ap-south-1.amazonaws.com"
          echo "ECR_REGISTRY=${ECR_REGISTRY}" >> $GITHUB_ENV
          
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${ECR_REGISTRY}

      - name: Debug BUILD_ID
        run: |
          echo "BUILD_ID=${BUILD_ID}"
          echo "BRANCH_LATEST_TAG=${BRANCH_LATEST_TAG}"

      - name: Create and Push Multi-Arch Manifest
        run: |
          docker manifest create ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:${BUILD_ID} \
            ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:amd64-${BUILD_ID} \
            ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:arm64-${BUILD_ID}

          docker manifest push ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:${BUILD_ID}

      - name: Create and Push Branch Latest Multi-Arch Tag
        run: |
          docker manifest create ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:${BRANCH_LATEST_TAG} \
            ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:amd64-${BUILD_ID} \
            ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:arm64-${BUILD_ID}

          docker manifest push ${ECR_REGISTRY}/${{ secrets.ECR_REPOSITORY }}:${BRANCH_LATEST_TAG}
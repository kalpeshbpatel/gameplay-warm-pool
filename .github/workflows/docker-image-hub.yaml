name: Build and Push Docker Image to Docker Hub

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  set-build-vars:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.vars.outputs.image_tag }}
      branch_latest_tag: ${{ steps.vars.outputs.branch_latest_tag }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Git and Timestamp Info
        id: vars
        run: |
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]' | tr '/' '-')
          SHORT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%s)
          TAG="${BRANCH_NAME}-${SHORT_SHA}-${TIMESTAMP}"
          LATEST_TAG="${BRANCH_NAME}-latest"
          echo "IMAGE_TAG=${TAG}" >> $GITHUB_ENV
          echo "BRANCH_LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV
          echo "::set-output name=image_tag::${TAG}"
          echo "::set-output name=branch_latest_tag::${LATEST_TAG}"
          echo "Generated Tag: ${TAG}"

  build-and-push:
    needs: set-build-vars
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU for Multi-Arch Build
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_IMAGE_NAME }}:${{ needs.set-build-vars.outputs.branch_latest_tag }}
            ${{ secrets.DOCKER_IMAGE_NAME }}:${{ needs.set-build-vars.outputs.image_tag }}
          platforms: linux/amd64, linux/arm64
          cache-from: type=registry,ref=${{ secrets.DOCKER_IMAGE_NAME }}:latest
          cache-to: type=inline

  send-notification:
    needs: create-manifest
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Send Notification to Microsoft Teams
        run: |
          REPO_URL="docker.io/${{ secrets.DOCKER_IMAGE_NAME }}"
          MESSAGE="## ðŸš€ Docker Image Successfully Built and Pushed \n
          - **Repository:** ${REPO_URL} \n
          - **Tags:** **${{ needs.set-build-vars.outputs.image_tag }}**, **${{ needs.set-build-vars.outputs.branch_latest_tag }}** \n
          - **Branch:** ${{ github.ref_name }} \n
          - **Commit:** ${{ github.sha }} \n
          - **GitHub Actions Run:** (${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          
          PAYLOAD="{\"text\": \"${MESSAGE}\" }"
          
          curl -H "Content-Type: application/json" \
               -d "${PAYLOAD}" \
               ${{ secrets.TEAMS_WEBHOOK_URL }}